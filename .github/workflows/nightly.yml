name: Nightly CI

on:
  push:
    paths:
      - '.github/workflows/nightly.yml'
  pull_request:
    paths:
      - '.github/workflows/nightly.yml'
  schedule:
  - cron: '0 2 * * *'

env:
  WORKFLOW_TOKEN: ${{ secrets.MANDREL_BOT_TOKEN }}

jobs:
  dispatch:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include:
          ####
          # Test Quarkus main with latest graal sources built as Mandrel and GraalVM
          ####
          - name: "Q main Mandrel build of latest graal"
            inputs: '{"quarkus-version": "main", "version": "graal/master", "jdk": "ea"}'
            workflow: 'base.yml'
          - name: "Q main Mandrel build of latest graal on windows"
            inputs: '{"quarkus-version": "main", "version": "graal/master", "jdk": "ea"}'
            workflow: 'base-windows.yml'
          - name: "Q main Mandrel build of 21.2-dev"
            inputs: '{"quarkus-version": "main", "version": "mandrel/21.2", "jdk": "ea", "mandrel-packaging-version": "21.2"}'
            workflow: 'base.yml'
          - name: "Q main Mandrel build of 21.2 on windows"
            inputs: '{"quarkus-version": "main", "version": "mandrel/21.2", "jdk": "ea", "mandrel-packaging-version": "21.2"}'
            workflow: 'base-windows.yml'
          - name: "Q main GraalVM CE build of latest graal"
            inputs: '{"quarkus-version": "main", "version": "graal/master", "distribution": "graalvm"}'
            workflow: 'base.yml'
          ####
          # Test Quarkus main with supported Mandrel versions using the Quay.io images
          ####
          - name: "Q main Mandrel 20.3 image from quay.io"
            inputs: '{"quarkus-version": "main", "builder-image": "quay.io/quarkus/ubi-quarkus-mandrel:20.3-java11"}'
            workflow: 'base.yml'
          - name: "Q main Mandrel 21.1 image from quay.io"
            inputs: '{"quarkus-version": "main", "builder-image": "quay.io/quarkus/ubi-quarkus-mandrel:21.1-java11"}'
            workflow: 'base.yml'
          ####
          # Test Quarkus main with supported Mandrel versions using the release archives
          ####
          #- name: "Q main Mandrel 20.3 release"
          #  inputs: '{"quarkus-version": "main", "version": "mandrel-20.3.1.2-Final", "build-from-source": "false"}'
          #  workflow: 'base.yml'
          #- name: "Q main Mandrel 21.0 release"
          #  inputs: '{"quarkus-version": "main", "version": "mandrel-21.0.0.0-Final", "build-from-source": "false"}'
          #  workflow: 'base.yml'
          ####
          # Test Quarkus main with supported GraalVM versions using the release archives
          ####
          #- name: "Q main GraalVM-CE 20.3 release"
          #  inputs: '{"quarkus-version": "main", "version": "vm-20.3.2", "build-from-source": "false", "distribution": "graalvm"}'
          #  workflow: 'base.yml'
          #- name: "Q main GraalVM-CE 21.0 release"
          #  inputs: '{"quarkus-version": "main", "version": "vm-21.1.0", "build-from-source": "false", "distribution": "graalvm"}'
          #  workflow: 'base.yml'
    steps:
    - name: Start workflow ${{ matrix.workflow }}
      timeout-minutes: 10
      run: |
        WF_RESULT="500"
        INPUTS=$(jq -c '. += {name: "${{ matrix.name }}"}' <<<$(echo '${{ matrix.inputs }}'))
        echo ${INPUTS}
        while [[ ${WF_RESULT} == "500" ]]
        do
          WF_RESULT=$(curl -s -X POST "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/${{ matrix.workflow }}/dispatches" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${WORKFLOW_TOKEN}" \
            -d "{\"ref\":\"${GITHUB_REF}\",\"inputs\":${INPUTS}}" \
            -w "%{http_code}")
          sleep 30 # back off
        done
        if [[ ${WF_RESULT} == "204" ]]
        then
          WF_ID=$(curl -s -X GET "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/${{ matrix.workflow }}/runs" \
            -H 'Accept: application/vnd.github.antiope-preview+json' \
            -H "Authorization: Bearer ${WORKFLOW_TOKEN}" | jq '[.workflow_runs[]] | first | .id')
          echo "Started ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${WF_ID}"
          echo "WF_ID=${WF_ID}" >> ${GITHUB_ENV}
        else
          echo -e "Failed with:\n ${WF_RESULT}\n"
          exit 1
        fi
    - name: Wait workflow ${{ matrix.workflow }}
      if: false
      run: |
        WF_CONCLUSION="null"
        WF_STATUS="inprogress"

        while [[ ${WF_CONCLUSION} == "null" && ${WF_STATUS} != "\"completed\"" ]]
        do
          sleep 60
          WF_RESULT=$(curl -s -X GET "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/${{ matrix.workflow }}/runs" \
            -H 'Accept: application/vnd.github.antiope-preview+json' \
            -H "Authorization: Bearer ${WORKFLOW_TOKEN}" | jq '.workflow_runs[] | select(.id == '${{ env.WF_ID }}')'
          WF_CONCLUSION=$(echo ${WF_RESULT} | jq '.conclusion')
          WF_STATUS=$(echo ${WF_RESULT} | jq '.status')
          echo "Waiting for ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ env.WF_ID }}"
          echo "Conclusion: ${WF_CONCLUSION}"
          echo "Status: ${WF_STATUS}"
        done

        if [[ ${WF_CONCLUSION == "\"success\"" && ${WF_STATUS} == "\"completed\"" ]]
        then
          echo "Succeeded"
        else
          echo "Failed with: ${WF_CONCLUSION}"
          exit 1
        fi
